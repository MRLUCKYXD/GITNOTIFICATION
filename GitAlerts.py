import sys, re
from logging import basicConfig, getLogger, INFO
from flask import Flask, request, jsonify
from html import escape
from requests import get, post
from os import environ
import config

from telegram.ext import (
      CommandHandler,
      Updater,
      CallbackContext,
)

from telegram import (
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    Update,
    ParseMode,
)

server = Flask(__name__)

basicConfig(level=INFO)
log = getLogger()

ENV = bool(environ.get('ENV', False))

if ENV:
    BOT_TOKEN = environ.get('BOT_TOKEN', None)
    PROJECT_NAME = environ.get('PROJECT_NAME', None)
    ip_addr = environ.get('APP_URL', None)
    HEROKU_APPNAME = environ.get("HEROKU_APPNAME", "gitalertbot")
    GIT_REPO_URL = environ.get('GIT_REPO_URL', "https://github.com/TeamScenario/GitAlerts")
else:
    BOT_TOKEN = config.BOT_TOKEN
    PROJECT_NAME = config.PROJECT_NAME
    ip_addr = get('https://api.ipify.org').text
    GIT_REPO_URL = config.GIT_REPO_URL
    HEROKU_APPNAME = config.HEROKU_APPNAME

updater = Updater(token=BOT_TOKEN, workers=1)
dispatcher = updater.dispatcher

print("If you need more help, join @TeraYaarHooMai in Telegram.")

xa = bytearray.fromhex("54 65 61 6D 53 63 65 6E 61 72 69 6F 2F 47 69 74 41 6C 65 72 74 73").decode()
axx = bytearray.fromhex("43 6F 64 65 72 58").decode()
xxc = bytearray.fromhex("54 65 61 6D 53 63 65 6E 61 72 69 6F").decode()
SOURCE = xa
DEVELOPER = axx
UPDATES = xxc

def help(update: Update, context: CallbackContext):
    message = update.effective_message
    textto = "·¥õ·¥è …¢·¥á·¥õ ·¥Ä ü·¥á Ä·¥õÍú± ·¥Ä ô·¥è·¥ú·¥õ  è·¥è·¥ú Ä  Ä·¥á·¥ò·¥èÍú±…™·¥õ·¥è Ä è Íú∞·¥è ü ü·¥è·¥° ·¥õ ú·¥á Íú±·¥õ·¥á·¥òÍú±  ô·¥á ü·¥è·¥°\n\n1.·¥Ä·¥Ö·¥Ö @lucky_officialbot …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥° ú·¥á Ä·¥á  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ  ô·¥è·¥õ ·¥õ·¥è Íú±·¥á…¥·¥Ö ·¥Ä ü·¥á Ä·¥õÍú±. \n\n2.Íú±·¥á…¥·¥Ö /id ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö. \n\n3.Íú±·¥á…¥·¥Ö /connect < è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò …™·¥Ö> (·¥ç·¥úÍú±·¥õ Íú±·¥õ·¥Ä Ä·¥õÍú± ·¥°…™·¥õ ú -100) \n\n4. ·¥Ä·¥Ö·¥Ö ·¥õ ú…™Íú±  ô·¥è·¥õ …™…¥ ·¥õ ú·¥Ä·¥õ …¢ Ä·¥è·¥ú·¥ò ·¥° ú·¥á Ä·¥á  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è  Ä·¥á·¥Ñ·¥á…™·¥†·¥á ·¥Ä ü·¥á Ä·¥õÍú±."
    pic = "https://telegra.ph/file/036139c8f3e30112586bb.jpg"
    buttons1 = [
            [
              InlineKeyboardButton("üçí ·¥è·¥°…¥·¥á Ä", url=f"https://t.me/cute_boy701"),
              InlineKeyboardButton ("·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± üçí", url=f"https://t.me/official_lucky01"),
            ],
            [
             InlineKeyboardButton("üçí Íú±·¥è·¥ú Ä·¥Ñ·¥á üçí", url=f"https://github.com/mrluckyxd/gitnotification")],
       ]
    markup_lol = InlineKeyboardMarkup(buttons1)
    update.message.reply_photo(photo=pic, caption=textto, reply_markup=markup_lol)


def lol(update: Update, context: CallbackContext):
    message = update.effective_message
    Pop = "https://telegra.ph/file/036139c8f3e30112586bb.jpg"
    text = " ú·¥á ü ü·¥è ·¥õ ú·¥á Ä·¥á …™'·¥ç …¢…™·¥õ ·¥Ä ü·¥á Ä·¥õÍú±  ô·¥è·¥õ  ô è @TeraYaarHooMai \n·¥Ñ ú·¥á·¥Ñ·¥ã Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ …¢ Ä·¥è·¥ú·¥ò Íú∞·¥è Ä  ú·¥á ü·¥ò  Ä·¥á…¢·¥Ä Ä·¥Ö…™…¥…¢  ô·¥è·¥õ ·¥è Ä ·¥Ö·¥á·¥ò ü·¥è è·¥ç·¥á…¥·¥õ. \n\nÍú∞·¥è Ä ·¥Ä…¥ è  ú·¥á ü·¥ò Íú±·¥á…¥·¥Ö /help \nÍú∞·¥è Ä Íú±·¥è·¥ú Ä·¥Ñ·¥á Íú±·¥á…¥·¥Ö /repo"
    
    buttons = [
             [
               InlineKeyboardButton("üçπ Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ ", url="https://t.me/Terayaarhoomai"),
               InlineKeyboardButton("·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± üçπ", url=f"https://t.me/official_lucky01"),
             ],
             [InlineKeyboardButton("üçí Íú±·¥è·¥ú Ä·¥Ñ·¥á üçí", url=f"https://github.com/mrluckyxd/gitnotification")],  
          ]

    reply_markup = InlineKeyboardMarkup(buttons)
    update.message.reply_photo(photo=Pop, caption=text, reply_markup=reply_markup)


def source(update: Update, context: CallbackContext):
    message = update.effective_message
    textto = "Íú±·¥è·¥ú Ä·¥Ñ·¥á ·¥èÍú∞ ·¥õ ú…™Íú±  ô·¥è·¥õ!"
    pic = "https://telegra.ph/file/036139c8f3e30112586bb.jpg"
    buttons1 = [
            [
              InlineKeyboardButton("üçπ ·¥è·¥°…¥·¥á Ä", url=f"https://t.me/cute_boy701"),
              InlineKeyboardButton ("·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± üçπ", url=f"https://t.me/official_lucky01"),
            ],
            [
             InlineKeyboardButton("üçí Íú±·¥è·¥ú Ä·¥Ñ·¥á üçí", url=f"https://github.com/mrluckyxd/gitnotification")],
       ]
    markup_lol = InlineKeyboardMarkup(buttons1)
    update.message.reply_photo(photo=pic, caption=textto, reply_markup=markup_lol)

def connect(update: Update, context: CallbackContext):
    message = update.effective_message
    text = message.text[len("/connect ") :]

    if text =='':
        message.reply_text("·¥ã…™…¥·¥Ö ü è …¢…™·¥†·¥á  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò …™·¥Ö \n·¥õ·¥è ·¥ã…¥·¥è·¥°  ú·¥è·¥° ·¥õ·¥è …¢·¥á·¥õ …¢ Ä·¥è·¥ú·¥ò …™·¥Ö Íú±·¥á…¥·¥Ö /help")
    x = re.search("^-100", text)

    if x or text !="":
        reply_text = f"·¥ò·¥Ä è ü·¥è·¥Ä·¥Ö ·¥ú Ä ü: `https://{HEROKU_APPNAME}.herokuapp.com//{text}` \n\nSend /morehelp for more help."
        message.reply_text(reply_text, parse_mode=ParseMode.MARKDOWN)
    else:
        reply_texto = "·¥° Ä·¥è…¥…¢ ·¥Ñ ú·¥Ä·¥õ …™·¥Ö! …™·¥õ ·¥ç·¥úÍú±·¥õ Íú±·¥õ·¥Ä Ä·¥õÍú± ·¥°…™·¥õ ú -1001 ·¥è Ä -100"
        message.reply_text(reply_texto)

def more_help(update: Update, context: CallbackContext):
    tt = "1.…¢·¥è ·¥õ·¥è  Ä·¥á·¥ò·¥è Íú±·¥á·¥õ·¥õ…™…¥…¢ \n2.Íú∞…™…¥·¥Ö ·¥°·¥á ô ú·¥è·¥è·¥ãÍú± ·¥õ ú·¥á Ä·¥á \n3.·¥Ä·¥Ö·¥Ö ·¥ò·¥Ä è ü·¥è·¥Ä·¥Ö ·¥ú Ä ü ·¥õ ú·¥á Ä·¥á \n\n4. ·¥Ñ ú·¥Ä…¥…¢·¥á ·¥Ñ·¥è…¥·¥õ·¥á…¥·¥õ ·¥õ è·¥ò·¥á ·¥õ·¥è ·¥Ä·¥ò·¥ò ü…™·¥Ñ·¥Ä·¥õ…™·¥è…¥/·¥äÍú±·¥è…¥ \n\n5.·¥° ú…™·¥Ñ ú ·¥á·¥†·¥á…¥·¥õÍú± ·¥°·¥è·¥ú ü·¥Ö  è·¥è·¥ú  ü…™·¥ã·¥á ·¥õ·¥è ·¥õ Ä…™…¢…¢·¥á Ä ·¥õ ú…™Íú± ·¥°·¥á ô ú·¥è·¥è·¥ã? \n√¢‚Ç¨¬¢ ·¥Ñ ú·¥è·¥èÍú±·¥á 1Íú±·¥õ ·¥è Ä 2…¥·¥Ö ·¥è·¥ò·¥õ…™·¥è…¥ \n\n6. ·¥Ä·¥Ö·¥Ö ·¥°·¥á ô ú·¥è·¥è·¥ã \n7. ·¥Ö·¥è…¥·¥á!"
    image = "https://telegra.ph/file/036139c8f3e30112586bb.jpg"
    btn = [
          [
           InlineKeyboardButton("üçπ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú±", url=f"https://t.me/official_lucky01"),
           InlineKeyboardButton("·¥è·¥°…¥·¥á Ä üçπ", url=f"https://t.me/cute_boy701"),
          ],
      ]
    haha = InlineKeyboardMarkup(btn)
    update.message.reply_photo(photo=image, caption=tt, reply_markup=haha)


dispatcher.add_handler(CommandHandler("start", lol, run_async=True))
dispatcher.add_handler(CommandHandler("help", help, run_async=True))
dispatcher.add_handler(CommandHandler("repo", source, run_async=True))
dispatcher.add_handler(CommandHandler("connect", connect, run_async=True))
dispatcher.add_handler(CommandHandler("morehelp", more_help, run_async=True))
updater.start_polling()

TG_BOT_API = f'https://api.telegram.org/bot{BOT_TOKEN}/'
checkbot = get(TG_BOT_API + "getMe").json()
if not checkbot['ok']:
    log.error("[ERROR] Invalid Token!")
    exit(1)
else:
    username = checkbot['result']['username']
    log.info(
        f"[INFO] Logged in as @{username}, waiting for webhook requests...")


def post_tg(chat, message, parse_mode):
    """Send message to desired group"""
    response = post(
        TG_BOT_API + "sendMessage",
        params={
            "chat_id": chat,
            "text": message,
            "parse_mode": parse_mode,
            "disable_web_page_preview": True}).json()
    return response


def reply_tg(chat, message_id, message, parse_mode):
    """reply to message_id"""
    response = post(
        TG_BOT_API + "sendMessage",
        params={
            "chat_id": chat,
            "reply_to_message_id": message_id,
            "text": message,
            "parse_mode": parse_mode,
            "disable_web_page_preview": True}).json()
    return response


@server.route("/", methods=['GET'])
# Just send 'Hello, world!' to tell that our server is up.
def helloWorld():
    return 'Hello, world!'


@server.route("/<groupid>", methods=['GET', 'POST'])
def git_api(groupid):
    """Requests to api.github.com"""
    data = request.json
    if not data:
        return f"<b>Add this url:</b> {ip_addr}/{groupid} to webhooks of the project"

    if data.get('hook'):
        repo_url = data['repository']['html_url']
        repo_name = data['repository']['name']
        sender_url = data['sender']['html_url']
        sender_name = data['sender']['login']
        response = post_tg(
            groupid,
            f"üåü Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è Íú±·¥á·¥õ ·¥°·¥á ô ú·¥è·¥è·¥ã Íú∞·¥è Ä <a href='{repo_url}'>{repo_name}</a>  ô è <a href='{sender_url}'>{sender_name}</a>!",
            "html"
        )
        return response

    if data.get('commits'):
        commits_text = ""
        rng = len(data['commits'])
        if rng > 10:
            rng = 10
        for x in range(rng):
            commit = data['commits'][x]
            if len(escape(commit['message'])) > 300:
                commit_msg = escape(commit['message']).split("\n")[0]
            else:
                commit_msg = escape(commit['message'])
            commits_text += f"{commit_msg}\n<a href='{commit['url']}'>{commit['id'][:7]}</a> - {commit['author']['name']} {escape('<')}{commit['author']['email']}{escape('>')}\n\n"
            if len(commits_text) > 1000:
                text = f"""‚ú® <b>{escape(data['repository']['name'])}</b> - …¥·¥á·¥° {len(data['commits'])} ·¥Ñ·¥è·¥ç·¥ç…™·¥õÍú± ({escape(data['ref'].split('/')[-1])})
{commits_text}
"""
                response = post_tg(groupid, text, "html")
                commits_text = ""
        if not commits_text:
            return jsonify({"ok": True, "text": "·¥Ñ·¥è·¥ç·¥ç…™·¥õÍú± ·¥õ·¥áx·¥õ …™Íú± …¥·¥è…¥·¥á"})
        text = f"""‚ú®¬® <b>{escape(data['repository']['name'])}</b> - …¥·¥á·¥° {len(data['commits'])} ·¥Ñ·¥è·¥ç·¥ç…™·¥õÍú± ({escape(data['ref'].split('/')[-1])})
{commits_text}
"""
        if len(data['commits']) > 10:
            text += f"\n\n<i>·¥Ä…¥·¥Ö {len(data['commits']) - 10} ·¥è·¥õ ú·¥á Ä ·¥Ñ·¥è·¥ç·¥ç…™·¥õÍú±</i>"
        response = post_tg(groupid, text, "html")
        return response

    if data.get('issue'):
        if data.get('comment'):
            text = f"""üö®‚Äô¬¨ …¥·¥á·¥° ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥õ: <b>{escape(data['repository']['name'])}</b>
{escape(data['comment']['body'])}

<a href='{data['comment']['html_url']}'>Issue #{data['issue']['number']}</a>
"""
            response = post_tg(groupid, text, "html")
            return response
        text = f"""üö®¬® …¥·¥á·¥° {data['action']} …™Íú±Íú±·¥ú·¥á Íú∞·¥è Ä <b>{escape(data['repository']['name'])}</b>
<b>{escape(data['issue']['title'])}</b>
{escape(data['issue']['body'])}

<a href='{data['issue']['html_url']}'>issue #{data['issue']['number']}</a>
"""
        response = post_tg(groupid, text, "html")
        return response

    if data.get('pull_request'):
        if data.get('comment'):
            text = f"""üí¨‚Äî ·¥õ ú·¥á Ä·¥á …™Íú± ·¥Ä …¥·¥á·¥° ·¥ò·¥ú ü ü  Ä·¥áQ·¥ú·¥áÍú±·¥õ Íú∞·¥è Ä <b>{escape(data['repository']['name'])}</b> ({data['pull_request']['state']})
{escape(data['comment']['body'])}

<a href='{data['comment']['html_url']}'>·¥ò·¥ú ü ü  Ä·¥áQ·¥ú·¥áÍú±·¥õ #{data['issue']['number']}</a>
"""
            response = post_tg(groupid, text, "html")
            return response
        text = f"""‚ùó‚Äî  …¥·¥á·¥° {data['action']} ·¥ò·¥ú ü ü  Ä·¥áQ·¥ú·¥áÍú±·¥õ Íú∞·¥è Ä <b>{escape(data['repository']['name'])}</b>
<b>{escape(data['pull_request']['title'])}</b> ({data['pull_request']['state']})
{escape(data['pull_request']['body'])}

<a href='{data['pull_request']['html_url']}'>Pull request #{data['pull_request']['number']}</a>
"""
        response = post_tg(groupid, text, "html")
        return response

    if data.get('forkee'):
        response = post_tg(
            groupid,
            f"üçÄ¬¥ <a href='{data['sender']['html_url']}'>{data['sender']['login']}</a> Íú∞·¥è Ä·¥ã·¥á·¥Ö <a href='{data['repository']['html_url']}'>{data['repository']['name']}</a>!\n·¥õ·¥è·¥õ·¥Ä ü Íú∞·¥è Ä·¥ãÍú± ·¥Ä Ä·¥á …¥·¥è·¥° {data['repository']['forks_count']} üòò",
            "html")
        return response

    if data.get('action'):

        if data.get('action') == "·¥ò·¥ú ô ü…™Íú± ú·¥á·¥Ö" and data.get('release'):
            text = f"<a href='{data['sender']['html_url']}'>{data['sender']['login']}</a> {data['action']} <a href='{data['repository']['html_url']}'>{data['repository']['name']}</a>!"
            text += f"\n\n<b>{data['release']['name']}</b> ({data['release']['tag_name']})\n{data['release']['body']}\n\n<a href='{data['release']['tarball_url']}'>Download tar</a> | <a href='{data['release']['zipball_url']}'>Download zip</a>"
            response = post_tg(groupid, text, "html")
            return response

        if data.get('action') == "started":
            text = f"üíò <a href='{data['sender']['html_url']}'>{data['sender']['login']}</a> …¢·¥Ä·¥†·¥á ·¥Ä Íú±·¥õ·¥Ä Ä ·¥õ·¥è <a href='{data['repository']['html_url']}'>{data['repository']['name']}</a>!\n·¥õ·¥è·¥õ·¥Ä ü Íú±·¥õ·¥Ä ÄÍú± ·¥Ä Ä·¥á …¥·¥è·¥° {data['repository']['stargazers_count']}"
            response = post_tg(groupid, text, "html")
            return response

        if data.get('action') == "edited" and data.get('release'):
            text = f"<a href='{data['sender']['html_url']}'>{data['sender']['login']}</a> {data['action']} <a href='{data['repository']['html_url']}'>{data['repository']['name']}</a>!"
            text += f"\n\n<b>{data['release']['name']}</b> ({data['release']['tag_name']})\n{data['release']['body']}\n\n<a href='{data['release']['tarball_url']}'>·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥õ·¥Ä Ä</a> | <a href='{data['release']['zipball_url']}'>·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥¢…™·¥ò</a>"
            response = post_tg(groupid, text, "html")
            return response

        if data.get('action') == "created":
            return jsonify({"ok": True, "text": "·¥ò·¥ÄÍú±Íú± ·¥õ Ä…™…¢…¢·¥á Ä Íú∞·¥è Ä ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö"})

        response = post_tg(
            groupid,
            f"<a href='{data['sender']['html_url']}'>{data['sender']['login']}</a> {data['action']} <a href='{data['repository']['html_url']}'>{data['repository']['name']}</a>!",
            "html")
        return response

    if data.get('ref_type'):
        response = post_tg(
            groupid,
            f"·¥Ä …¥·¥á·¥° {data['ref_type']} ·¥è…¥ <a href='{data['repository']['html_url']}'>{data['repository']['name']}</a> ·¥°·¥ÄÍú± ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö  ô è <a href='{data['sender']['html_url']}'>{data['sender']['login']}</a>!",
            "html")
        return response

    if data.get('created'):
        response = post_tg(groupid,
                           f" ô Ä·¥Ä…¥·¥Ñ ú {data['ref'].split('/')[-1]} <b>{data['ref'].split('/')[-2]}</b> ·¥è…¥ <a href='{data['repository']['html_url']}'>{data['repository']['name']}</a> ·¥°·¥ÄÍú± ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö  ô è <a href='{data['sender']['html_url']}'>{data['sender']['login']}</a>!",
                           "html")
        return response

    if data.get('deleted'):
        response = post_tg(groupid,
                           f" ô Ä·¥Ä…¥·¥Ñ ú {data['ref'].split('/')[-1]} <b>{data['ref'].split('/')[-2]}</b> ·¥è…¥ <a href='{data['repository']['html_url']}'>{data['repository']['name']}</a> ·¥°·¥ÄÍú± ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö  ô è <a href='{data['sender']['html_url']}'>{data['sender']['login']}</a>!",
                           "html")
        return response
    xx = bytearray.fromhex("43 6F 64 65 72 58").decode()
    fck = bytearray.fromhex("54 65 61 6D 53 63 65 6E 61 72 69 6F 2F 47 69 74 41 6C 65 72 74 73").decode()
    dkb = bytearray.fromhex("54 65 61 6D 53 63 65 6E 61 72 69 6F").decode()
    if DEVELOPER != xx:
       print("Íú±·¥è Íú±·¥Ä·¥Ö,  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥Ñ ú·¥Ä…¥…¢·¥á ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä, ·¥Ñ ú·¥Ä…¥…¢·¥á …™·¥õ  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è  ü·¥ú·¥Ñ·¥ã è ·¥á üÍú±·¥á …™ ·¥°·¥è…¥'·¥õ ·¥°·¥è Ä·¥ã")
       sys.exit(1)

    if SOURCE != fck:
       print("Íú±·¥è Íú±·¥Ä·¥Ö,  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥Ñ ú·¥Ä…¥…¢·¥á·¥Ö Íú±·¥è·¥ú Ä·¥Ñ·¥á, ·¥Ñ ú·¥Ä…¥…¢·¥á …™·¥õ  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è ·¥ç Ä ü·¥ú·¥Ñ·¥ã èx·¥Ö/…¢…™·¥õ…¥·¥è·¥õ…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ ·¥á üÍú±·¥á …™ ·¥°·¥è…¥·¥õ ·¥°·¥è Ä·¥ã")
       sys.exit(1)

    if UPDATES != dkb:
       print("So sad, you have changed Updates, change it back to TeamScenario else I won't work")
       sys.exit(1)

    if data.get('forced'):
        response = post_tg(groupid,
                           f" ô Ä·¥Ä…¥·¥Ñ ú {data['ref'].split('/')[-1]} <b>{data['ref'].split('/')[-2]}</b>" +
                           " ·¥è…¥ <a href='{data['repository']['html_url']}'>{data['repository']['name']}</a> was" +
                           " Íú∞·¥è Ä·¥Ñ·¥á·¥Ö  ô è <a href='{data['sender']['html_url']}'>{data['sender']['login']}</a>!",
                           "html")
        return response

    if data.get('pages'):
        text = f"<a href='{data['repository']['html_url']}'>{data['repository']['name']}</a> wiki pages were updated by <a href='{data['sender']['html_url']}'>{data['sender']['login']}</a>!\n\n"
        for x in data['pages']:
            summary = ""
            if x['summary']:
                summary = f"{x['summary']}\n"
            text += f"üìë<b>{escape(x['title'])}</b> ({x['action']})\n{summary}<a href='{x['html_url']}'>{x['page_name']}</a> - {x['sha'][:7]}"
            if len(data['pages']) >= 2:
                text += "\n=====================\n"
            response = post_tg(groupid, text, "html")
        return response

    if data.get('context'):
        if data.get('state') == "·¥ò·¥á…¥·¥Ö…™…¥…¢":
            emo = "‚è≥"
        elif data.get('state') == "Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±":
            emo = "‚úÖ"
        elif data.get('state') == "Íú∞·¥Ä…™ ü·¥ú Ä·¥á":
            emo = "‚ùå"
        else:
            emo = "üî∞"
        response = post_tg(
            groupid,
            f"{emo} <a href='{data['target_url']}'>{data['description']}</a>" +
            " on <a href='{data['repository']['html_url']}'>{data['repository']['name']}</a>" +
            " by <a href='{data['sender']['html_url']}'>{data['sender']['login']}</a>!" +
            "\nLatest commit:\n<a href='{data['commit']['commit']['url']}'>{escape(data['commit']['commit']['message'])}</a>",
            "html")
        return response

    url = deldog(data)
    response = post_tg(
        groupid,
        "üö´¬´ ·¥°·¥á ô ú·¥è·¥è·¥ã ·¥á…¥·¥Ö·¥ò·¥è…™…¥·¥õ Íú∞·¥è Ä ·¥õ ú…™Íú± ·¥Ñ ú·¥Ä·¥õ  ú·¥ÄÍú±  Ä·¥á·¥Ñ·¥á…™·¥†·¥á·¥Ö Íú±·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥õ ú·¥Ä·¥õ ·¥Ö·¥è·¥áÍú±…¥'t ·¥ú…¥·¥Ö·¥á ÄÍú±·¥õ·¥è·¥è·¥Ö  è·¥á·¥õ. " +
        f"\n\n ü…™…¥·¥ã ·¥õ·¥è  ü·¥è…¢Íú± Íú∞·¥è Ä ·¥Ö·¥á ô·¥ú…¢…¢…™…¥…¢: {url}",
        "markdown")
    return response


def deldog(data):
    """Pasing the stings to del.dog"""
    BASE_URL = 'https://del.dog'
    r = post(f'{BASE_URL}/documents', data=str(data).encode('utf-8'))
    if r.status_code == 404:
        r.raise_for_status()
    res = r.json()
    if r.status_code != 200:
        r.raise_for_status()
    key = res['key']
    if res['isUrl']:
        reply = f'DelDog URL: {BASE_URL}/{key}\nYou can view stats, etc. [here]({BASE_URL}/v/{key})'
    else:
        reply = f'{BASE_URL}/{key}'
    return reply


if __name__ == "__main__":
    port = int(environ.get("PORT", 8080))
    server.run(host="0.0.0.0", port=port)
